/**
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";

package bowler.plugin;

import "git_f_s.proto";

option java_multiple_files = true;
option java_package = "com.commonwealthrobotics.proto.plugin";

// Next: 3
// A request to search the plugin registry for plugins matching the keywords.
message SearchRequest {
  // Any keywords to use in the search
  repeated string keywords = 1;

  // The Git remote of the plugin registry
  string registry_remote = 2;
}

// Next: 2
// The results of a plugin search
message SearchResponse { repeated git_f_s.FileSpec plugins = 1; }

// Next: 2
// The capabilities a plugin provides
message CapabilitiesResponse { repeated string capabilities = 1; }

// Next: 3
message ConfigurationRequest {
  // The plugin with the capability
  git_f_s.FileSpec plugin = 1;

  // The capability
  string capability = 2;
}

// Next: 2
message ConfigurationResponse {
  // The template configuration
  string configuration = 1;
}

// Next: 4
message ConfiguredPlugin {
  // The plugin with the capability
  git_f_s.FileSpec plugin = 1;

  // The capability
  string capability = 2;

  // The modified configuration
  string configuration = 3;
}

// Next: 2
message ValidateConfigurationRequest { ConfiguredPlugin plugin = 1; }

// Next: 2
message ValidateConfigurationResponse {
  // The modified configuration annotated with pass/fail & causes
  string validated_configuration = 1;
}

// Handles interactions with plugins. Plugins use the FileSpec schema for code
// reuse purposes, but may never set a Patch.
service PluginManager {
  // Searches for plugins with keywords
  rpc Search(SearchRequest) returns (SearchResponse);

  // Lists the capabilities a plugin provides
  rpc ListCapabilities(git_f_s.FileSpec) returns (CapabilitiesResponse);

  // Gets the template configuration
  rpc GetConfiguration(ConfigurationRequest) returns (ConfigurationResponse);

  // Validates a modified configuration
  rpc ValidateConfiguration(ValidateConfigurationRequest)
      returns (ValidateConfigurationResponse);
}
