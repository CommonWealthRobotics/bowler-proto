/**
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";

package bowler.robot_config;

import "git_f_s.proto";
import "plugin.proto";

option java_multiple_files = true;
option java_package = "com.commonwealthrobotics.proto.robot_config";

// A 6DOF pose.
//
// Next: 8
message Pose {
  double x_mm = 1;
  double y_mm = 2;
  double z_mm = 3;
  double qw = 4;
  double qx = 5;
  double qy = 6;
  double qz = 7;
}

// A center of mass.
//
// Next: 3
message CenterOfMass {
  Pose centroid = 1;
  double mass_kg = 2;
}

// All of the possible configurations of a limb.
//
// Next: 10
message LimbType {
  // An arm is a limb that is used for manipulation (and not locomotion).
  bool is_arm = 1;

  // A leg is a limb that is used for locomotion.
  bool is_leg = 2;

  // A head is a limb that may be used to mount sensors, secondary actuators, and may be used to
  // improve the robot's balance.
  bool is_head = 3;

  // A tail is a limb that is primarily used to improve the robot's balance.
  bool is_tail = 4;

  // A steerable wheel is a powered or unpowered wheel that can rotate about its yaw axis.
  bool is_steerable_wheel = 5;

  // A fixed wheel is a powered or unpowered wheel that cannot rotate about its yaw axis.
  bool is_fixed_wheel = 6;

  // A control surface is an aerodynamic limb that is used to adjust an aircraft's attitude.
  bool is_control_surface = 7;

  // A thruster is a limb that generates a propulsive force.
  bool is_thruster = 8;

  // A spine is a limb that connects two bases.
  bool is_spine = 9;
}

// A vitamin is anything that cannot be produced by additive manufacturing (e.g., actuators,
// sensors, fasteners). There are two classes of vitamins: primary and secondary.
//
// Primary vitamins are actuators and sensors. These vitamins, along with the kinematic description,
// account the majority of the functionality of the robot. These vitamins also have plugins
// associated with them because they constitute some electromechanical interface. See
// `ConfiguredPluginWithVitamin` for more information.
//
// Secondary vitamins are all other vitamins: fasteners, rubber feet, etc.
//
// Vitamins are stored in a database. A vitamin's `type` and `size` uniquely identifies it within
// the database. Other information about the vitamin, such as its mass, center of mass, and price,
// are available to the CAD generator after it has retrieved the vitamin from the database;
// therefore, those values are not specified here. Furthermore, there are multiple vitamin
// databases. Each database roughly represents a manufacturer's product range; any given vitamin may
// be available from multiple manufacturers at different price points. One implication of this is
// that determining the true BOM requires selecting not only the vitamins, but also the manufactures
// from which those vitamins are sourced (on a per-vitamin basis).
//
// Next: 3
message Vitamin {
  // A unique identifier for the vitamin's product line (e.g. a servo model, a bolt type (e.g. M5)).
  string type = 1;

  // A unique identifier for the item in the vitamin's product line (e.g. the length of an M5 bolt).
  // Some vitamins may only have one size (e.g. a custom motor), other may have many sizes (e.g. an
  // M5 bolt has many standard lengths).
  string size = 2;
}

// A ConfiguredPlugin with a Vitamin and a Pose. Used to represent primary vitamins.
//
// Next: 4
message ConfiguredPluginWithVitamin {
  plugin.ConfiguredPlugin plugin = 1;
  Vitamin vitamin = 2;
  Pose pose = 3;
}

// A parallel group is a group of limbs that form a parallel mechanism (or any
// sort of kinematic loop). This message specifies the data needed on each limb
// of the group. In the documentation for this message, references to "this
// limb" refer to the limb that this ParallelGroupData is a member of.
//
// Next: 5
message ParallelGroupData {
  // The unique name of this parallel group. All limbs with a ParallelGroupData
  // with this name will be part of the same parallel group.
  string parallel_group_name = 1;

  // The name of the limb that this limb is relative to, referred to as the
  // "relative-to limb".
  string relative_to_limb_name = 2;

  // An index of a link in the relative-to limb. This limb's tip is constrained
  // (along with the parallel_group_tip_offset) to the tip of this link.
  int32 relative_to_link_index = 3;

  // The offset from the tip of this limb to the tip of the specified link on
  // the relative-to limb.
  Pose parallel_group_tip_offset = 4;
}

// A base is an anchor for limbs.
//
// Next: 7
message Base {
  // A human-friendly name.
  string name = 1;

  // All the limbs attached to this base.
  repeated Limb appendage = 2;

  // Any sensors attached to this base.
  repeated ConfiguredPluginWithVitamin sensors = 3;

  // The center of mass of this base without any limbs attached.
  CenterOfMass center_of_mass = 4;

  // The CAD scripts that can be used to generate this base.
  // TODO: Define the interface this script must implement.
  // TODO: Define what happens if multiple CAD scripts change the robot config.
  repeated git_f_s.FileSpec cad_scripts = 5;

  // The selected CAD script that will be used to generate this base. This is a 1-based index.
  fixed32 cad_script_index = 6;
}

// A limb of the robot.
//
// Next: 9
message Limb {
  // A human-friendly name.
  string name = 1;

  // An ordered list of links that make up this limb.
  repeated Link links = 2;

  // A frame transform from the base to which this limb is attached to the root
  // of this limb.
  Pose base_to_limb_root_transform = 3;

  // (optional) The parallel group this limb is part of.
  ParallelGroupData parallel = 4;

  // The controller for this limb.
  // TODO: Define the interface this script must implement.
  git_f_s.FileSpec limb_controller = 5;

  // The type of this limb.
  LimbType type = 6;

  // The CAD scripts that can be used to generate this limb.
  // TODO: Define the interface this script must implement.
  // TODO: Define what happens if multiple CAD scripts change the robot config.
  repeated git_f_s.FileSpec cad_scripts = 7;

  // The selected CAD script that will be used to generate this limb. This is a 1-based index.
  fixed32 cad_script_index = 8;
}

// A link of a limb.
//
// Next: 17
message Link {
  // A human-friendly name.
  string name = 1;

  // (optional) A base attached to the tip of this link.
  Base subbase = 2;

  // The center of mass of this link.
  CenterOfMass center_of_mass = 4;

  // The DH parameter a value (translation along the x axis).
  double dh_a_mm = 5;

  // The DH parameter d value (translation along the z axis).
  double dh_d_mm = 6;

  // The DH parameter theta value (rotation around the z axis).
  double dh_theta_degrees = 7;

  // The DH parameter alpha value (rotation around the x axis).
  double dh_alpha_degrees = 8;

  // True if this link is prismatic (actuates along z), false if it is
  // rotational (actuates around z).
  bool is_prismatic = 9;

  // True if this link is a tool (an end effector) instead of a regular link.
  bool is_tool_link = 10;

  // True if this link is a passive link (meaning it does not have an actuator).
  bool is_passive = 11;

  // Any follower links. A follower link receives the same setpoint as the link
  // it follows.
  repeated Link follower = 12;

  // Uniquely specifies the device that the actuator and sensors on this link
  // are physically connected to.
  int32 device_id = 13;

  // The one and only actuator for this link (though it could be a
  // multi-actuator plugin). This actuator is oriented at the base of this link
  // to obey the DH convention (specify a non-identity pose to change where it
  // is on the link relative to that orientation). If this link does not have an
  // actuator and is passive, set `is_passive` and don't supply an actuator
  // here.
  ConfiguredPluginWithVitamin actuator = 14;

  // 0..* sensors attached to this link. These sensors are oriented at the base
  // of this link to obey the DH convention (specify a non-identity pose to
  // change where it is on the link relative to that orientation).
  repeated ConfiguredPluginWithVitamin sensors = 15;

  // The sensor in `sensors` that senses the joint value. If there is no sensor
  // that senses the joint value, set this to `-1`.
  int32 joint_sensor_index = 16;
}

// The full configuration describing a robot. This configuration is all that is needed to produce a
// complete robot including (but not limited to) CAD geometry, controls, and device software.
//
// Next: 5
message RobotConfig {
  // The devices connected to the robot. Each is specified with a unique ID that
  // is referenced later by the links.
  map<int32, plugin.ConfiguredPlugin> devices = 1;

  // The primary base from which the robot is typically controlled.
  Base primary_base = 2;

  // The body controllers that can be used to control the robot. Only one may be ran at a time.
  // TODO: Define the interface this script must implement.
  repeated git_f_s.FileSpec body_controllers = 3;

  // The selected body controller script that will be used to control the robot. This is a 1-based
  // index.
  fixed32 body_controller_index = 4;
}
