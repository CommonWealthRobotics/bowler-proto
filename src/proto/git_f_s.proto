/**
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";

package bowler.git_f_s;

option java_multiple_files = true;
option java_package = "com.commonwealthrobotics.proto.gitfs";

// Next: 4
// The host-agnostic identifier for a project. This models both projects that
// are published to a Git remote and those that are not.
message ProjectSpec {
  // The Git remote path containing the project. If the project is not
  // published to a remote, leave this empty.
  string repo_remote = 1;

  // The Git commit-ish identifying the revision of the repository. If the
  // project is not published to a remote, leave this empty.
  string revision = 2;

  // A Git patch containing local changes against the remote's version of the
  // project at the specified revision. If the project is not under source
  // control, this will be the full content of the project (this patch will be
  // applied against an empty repository).
  Patch patch = 3;
}

// Next: 2
// A model of a Git patch
message Patch {
  // The contents of a Git patch file
  bytes patch = 1;
}

// Next: 3
// The host-agnostic identifier for a file in a project
message FileSpec {
  // The project containing the file
  ProjectSpec project = 1;

  // The relative path to the file within the repository
  string path = 2;
}

// Next: 1
// The request message for a clearing the GitFS cache
message ClearCacheRequest {}

// Next: 1
// The response message for a clearing the GitFS cache
message ClearCacheResponse {}

// The GitFS service
service GitFS {
  rpc ClearCache(ClearCacheRequest) returns (ClearCacheResponse);
}
