/**
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";

package bowler.script_host;

import "git_f_s.proto";
import "robot_config.proto";
import "policy.proto";

option java_multiple_files = true;
option java_package = "com.commonwealthrobotics.proto.script_host";

// Client message to run a script.
//
// Next: 6
message RunRequest {
  // The script to run.
  bowler.git_f_s.FileSpec file = 2;

  // Dev'd dependencies. A "dev'd" dependency is so-called because it is being actively *developed*
  // while also being consumed by another project. The user developing this dependency alongside
  // their project may want to iterate on this dependency quickly without having to create releases
  // to integrate their changes into the consuming project. That user should *dev* their dependency,
  // which will cause their local version to be resolved instead of the published version.
  //
  // Dependency resolution works as follows:
  //
  // 1. Scripts may import scripts from the same project. These dependencies are resolved to the
  // relevant files in that project.
  // 2. Scripts may import scripts in other Bowler libraries that are hosted on a Git remote.
  //     a) If the script being imported is not dev'd, that script is resolved to the version of the
  //     script on the remote.
  //     b) If the script being imported is dev'd, that script is resolved to
  //     the local (local to the client) version of that script.
  repeated bowler.git_f_s.ProjectSpec devs = 3;

  // Any script environment variables. These will be passed to the script when it is started.
  map<string, string> environment = 4;
}

// Returned as a stream from a RunRequest.
//
// Next: 10
message RunResponse {
  oneof message {
    // Indicates a new task starting. A task represents a unit of work smaller than the running
    // script. Tasks are used only to provide transparency to the user. Tasks are not meant to be
    // used programmatically in any way (other than to display their status to the user). All tasks
    // must end before their parent script ends. 0..* tasks can be started from any run request.
    // Task IDs are unique within the scope of the request, but may not be globally unique.
    NewTask new_task = 1;

    // Indicates an update to the status of a task.
    TaskUpdate task_update = 2;

    // Indicates that a task ended (successfully or not).
    TaskEnd task_end = 3;

    // A slice of the script's stdout and stderr. This may be sent while the script is running to
    // provide some real-time feedback to the user. Each one of these messages should be assembled
    // in the order in which they are received to form the complete stdout and stderr. Two
    // back-to-back messages will not contain any overlap.
    IntermediateOutput intermediate_output = 9;

    // Result from a successful script exit. This is a terminal state; the request ends with this
    // message.
    ScriptOutput script_output = 8;

    // A fatal error encountered during execution. This is a terminal state; the request ends with
    // this message.
    RequestError error = 7;
  }
}

// Generates and validates the robot CAD. The robot's CAD is defined as a function that maps the
// robot config to a set of CAD objects and a (possibly different) robot config. This function is
// called the CAD generator; it is implemented by a script and therefore specified by a FileSpec.
// The CAD generator is not allowed to select any primary vitamins. All the primary vitamins are
// specified in the robot config and are immutable as far as the CAD generator is concerned.
// Primary vitamin optimization, along with other config optimizations (e.g. DH parameters), may be
// implemented at a higher level. The CAD generator is, however, allowed to select any secondary
// vitamins it requires. The CAD generator is also allowed to adjust noncritical aspects of the
// robot configuration (e.g. joint limits) when required. The client is encouraged to show any robot
// config adjustments through some visual means so that config changes are immediately obvious to
// the user.
//
// Next: 4
message GenerateAndValidateCADRequest {
  // The robot config to generate CAD for.
  bowler.robot_config.RobotConfig config = 1;

  // The CAD generator to run.
  bowler.git_f_s.FileSpec cad_generator = 2;
}

// The response for GenerateAndValidateCADRequest. The CAD geometry and secondary vitamins are not
// included in this response. This information is kept on the kernel side (or possibly copied
// to bowler-display, if it is connected).
//
// Next: 7
message GenerateAndValidateCADResponse {
  oneof message {
    // Message to indicate a new task starting. 0..* tasks can be started from
    // any client request. Task IDs will be unique at least within the scope of
    // the request, but may not be globally unique. Tasks started during a
    // request will not exist past the end of that request.
    NewTask new_task = 1;

    // Message to indicate an update to the status of a task.
    TaskUpdate task_update = 2;

    // Message to indicate that a task completed.
    TaskEnd task_end = 3;

    // Result from a successful script exit. This is a terminal state; the request ends with this
    // message.
    GenerateAndValidateCADOutput output = 4;

    // Error in execution of a request. This is a terminal state; the request ends with this
    // message.
    RequestError error = 5;
  }
}

// The response from a successful GenerateAndValidateCADRequest.
//
// Next: 3
message GenerateAndValidateCADOutput {
  // The output from the CAD script.
  ScriptOutput script_output = 1;

  // The robot config after any adjustments made by the CAD script.
  bowler.robot_config.RobotConfig config = 2;
}

// Server message to indicate a new task starting.
//
// Next: 4
message NewTask {
  // The description of the task.
  string description = 2;

  // The initial status of the task.
  TaskUpdate task = 3;
}

// Server message to indicate an update to the status of a task.
//
// Next: 3
message TaskUpdate {
  // The unique ID of the task. Task IDs will be unique at least within the
  // scope of the request, but may not be globally unique.
  int64 task_id = 1;

  // The progress of the task.
  float progress = 2;
}

// Server message to indicate that a task completed.
//
// Next: 4
message TaskEnd {
  // The unique ID of the task.
  int64 task_id = 1;

  // The reason the task ended.
  TaskEndCause cause = 2;

  // If the task completed erroneously, set this field to a description of the
  // error. Typically, the server should also close the session with a
  // RequestError. If the task completed successfully, leave this field empty.
  string error = 3;
}

// Possible causes for a task to end.
//
// Next: 3
enum TaskEndCause {
  UNSET = 0;

  // The task successfully completed.
  TASK_COMPLETED = 1;

  // The task resulted in an error.
  TASK_FAILED = 2;

  // The task was cancelled.
  TASK_CANCELLED = 3;
}

// A slice of the script's stdout and stderr. The contents of this message only make sense in the
// context of a stream in which 0..* of these messages may be sent in order. Each one of these
// messages should be assembled in the order in which they are received to form the complete stdout
// and stderr. Two back-to-back messages will not contain any overlap.
//
// Next: 3
message IntermediateOutput {
  // The data the script wrote to stdout.
  string stdout = 1;

  // The data the script wrote to stderr.
  string stderr = 2;
}

// The complete state of the script's output when it has finished running.
//
// Next: 6
message ScriptOutput {
  // The (stringified) return value from the script. Any richer output data should be put into files
  // inside the script's output directory.
  string output = 2;

  // The data the script wrote to stdout. This string may be truncated if it is too long; the
  // maximum buffer length is determined by the kernel.
  string stdout = 4;

  // The data the script wrote to stderr. This string may be truncated if it is too long; the
  // maximum buffer length is determined by the kernel.
  string stderr = 5;

  // A compressed tarball containing the output files.
  bytes tarball = 3;
}

// Client or server message to report an error in response to a request.
//
// Next: 4
message RequestError {
  // The human-readable description of the error.
  string description = 2;

  // The stacktrace that caused the script to fail.
  string stacktrace = 3;
}

// This service contains all the kernel calls that involve executing scripts.
//
// When the kernel runs a script, it is run within the permissions set by the effective
// PolicyDocument. See the bowler.policy package for the PolicyService, by which the effective
// PolicyDocument may be set.
service ScriptHost {
  // Runs a script. The response stream will be kept open until the script finishes running, either
  // by terminating successfully or by failing. The documentation for this RPC is part of RunRequest
  // and RunResponse.
  rpc RunScript(RunRequest) returns (stream RunResponse);

  // Runs the CAD generator. The response stream will be kept open until the CAD generator finishes
  // running, either by terminating successfully or by failing. The documentation for this RPC is
  // part of GenerateAndValidateCADRequest and GenerateAndValidateCADResponse.
  rpc GenerateAndValidateCAD(GenerateAndValidateCADRequest)
      returns (stream GenerateAndValidateCADResponse);
}
