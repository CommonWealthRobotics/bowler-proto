/**
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";

package bowler.script_host;

import "git_f_s.proto";
import "robot_config.proto";

option java_multiple_files = true;
option java_package = "com.commonwealthrobotics.proto.script_host";

// Next: 8
// The message the client sends to the server.
message SessionClientMessage {
  oneof message {
    // Request to run a script.
    RunRequest run_request = 1;

    // Request to cancel a task.
    CancelRequest cancel_request = 7;

    // Response to a confirmation request.
    ConfirmationResponse confirmation_response = 2;

    // Response to a credentials request.
    CredentialsResponse credentials_response = 3;

    // An update to the robot configuration.
    NewConfig new_config = 6;

    // An error encountered while processing a request from the server.
    RequestError error = 5;
  }
}

// Next: 5
// Client message to run a script
message RunRequest {
  // The unique ID of the request. This request ID is generated by the client.
  // It must be unique for the duration of the session RPC. Any
  // requests/responses regarding this run request must use the same request_id.
  int64 request_id = 1;

  // The file to run.
  bowler.git_f_s.FileSpec file = 2;

  // Dev'd dependencies.
  //
  // Dependency resolution works as follows:
  // 1. Scripts may import scripts from the same project. These dependencies are
  // resolved to the relevant files in that project.
  // 2. Scripts may import scripts in other Bowler libraries that are hosted on
  // a Git remote.
  //     a) If the script being imported is not dev'd, that script is resolved
  //     to the version of the script on the remote. b) If the script being
  //     imported is dev'd, that script is resolved to the local (local to the
  //     client) version of that script.
  repeated bowler.git_f_s.ProjectSpec devs = 3;

  // Script environment variables.
  map<string, string> environment = 4;
}

// Next: 3
// Client message to cancel a task.
message CancelRequest {
  // The ID of the request.
  int64 request_id = 1;

  // The ID of the task.
  int64 task_id = 2;
}

// Next: 3
// Client message to respond to a confirmation request
message ConfirmationResponse {
  // The ID of the request
  int64 request_id = 1;

  // The value of the response
  ConfirmationValue response = 2;
}

// Next: 2
// Value of a confirmation response
enum ConfirmationValue {
  // User responded 'Allow'
  ALLOWED = 0;

  // User responded 'Deny'
  DENIED = 1;
}

// Next: 4
// Client message to fulfill a credentials request.
message CredentialsResponse {
  // The ID of the request which is being fulfilled.
  int64 request_id = 1;

  // The credentials to use. If using anonymous auth, don't set this field.
  oneof credentials {
    // Username and password (or PAT) pair.
    BasicCredentials basic = 2;

    // OAuth.
    OAuthCredentials oauth = 3;
  }
}

// Next: 4
// Credentials implementation for a username and password pair
message BasicCredentials {
  // The username
  string username = 1;

  // The password
  string password = 2;
}

// Next: 2
// Credentials implementation for OAuth
message OAuthCredentials {
  // The OAuth token
  string token = 1;
}

// Next: 10
// The message the server sends to the client.
// TODO: Add a way for the server to send script stdout and stderr to the
//  client while the script runs and when it finishes.
message SessionServerMessage {
  oneof message {
    // Message to indicate a new task starting. 0..* tasks can be started from
    // any client request. Task IDs will be unique at least within the scope of
    // the request, but may not be globally unique. Tasks started during a
    // request will not exist past the end of that request.
    NewTask new_task = 1;

    // Message to indicate an update to the status of a task
    TaskUpdate task_update = 2;

    // Message to indicate that a task completed
    TaskEnd task_end = 3;

    // Request for user confirmation
    ConfirmationRequest confirmation_request = 4;

    // Request for user credentials
    CredentialsRequest credentials_request = 5;

    // Result from a successful script exit. Terminates this session.
    ScriptOutput script_output = 8;

    // An update to the robot configuration
    NewConfig new_config = 9;

    // Error in execution of a request. Terminates this session.
    RequestError error = 7;
  }
}

// Next: 4
// Server message to indicate a new task starting
message NewTask {
  // The ID of the request that created the task, if it was created on client
  // request
  int64 request_id = 1;

  // The description of the task
  string description = 2;

  // The initial status of the task
  TaskUpdate task = 3;
}

// Next: 3
// Server message to indicate an update to the status of a task
message TaskUpdate {
  // The unique ID of the task. Task IDs will be unique at least within the
  // scope of the request, but may not be globally unique.
  int64 task_id = 1;

  // The progress of the task
  float progress = 2;
}

// Next: 4
// Server message to indicate that a task completed
message TaskEnd {
  // The unique ID of the task
  int64 task_id = 1;

  // The reason the task ended
  TaskEndCause cause = 2;

  // If the task completed erroneously, set this field to a description of the
  // error. Typically, the server should also close the session with a
  // RequestError. If the task completed successfully, leave this field empty.
  string error = 3;
}

// Next: 3
// Possible causes for a task to end
enum TaskEndCause {
  // The task successfully completed
  TASK_COMPLETED = 0;

  // The task resulted in an error
  TASK_FAILED = 1;

  // The task was cancelled
  TASK_CANCELLED = 2;
}

// Next: 3
// Server message to request user confirmation
message ConfirmationRequest {
  // The unique ID of the request
  int64 request_id = 1;

  // The human-readable description of the action
  string description = 2;
}

// Next: 4
// Server message to request user credentials
message CredentialsRequest {
  // The unique ID of the request
  int64 request_id = 1;

  // The remote for which credentials are being requested
  string remote = 3;
}

// Next: 4
// The complete state of the script's output directory when it is finished
// running.
message ScriptOutput {
  // The unique ID of the request
  int64 request_id = 1;

  // Stringified output from the script. This is some descriptive string showing the script output. Any richer output data should be put into files the script's output directory.
  string output = 2;

  // Tarball containing the output files
  bytes tarball = 3;
}

// Next: 2
// Client message to update the robot configuration
message NewConfig {
  // The new robot configuration object
  bowler.robot_config.RobotConfig config = 1;
}

// Next: 4
// Client or server message to report an error in response to a request
message RequestError {
  // The unique ID of the request
  int64 request_id = 1;

  // The human-readable description of the error
  string description = 2;

  // The stacktrace that caused the script to fail
  string stacktrace = 3;
}

// The script host service
service ScriptHost {
  // Initiate a script session with the kernel
  rpc Session(stream SessionClientMessage)
      returns (stream SessionServerMessage);
}
